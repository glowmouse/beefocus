
import os

path = "wifi_html"
header = open("webpage.h", "w")
header.write("#ifndef __WEBPAGE_H__\n")
header.write("#define __WEBPAGE_H__\n")
header.write("\n")
header.write("#include <vector>\n");
header.write("#include <unordered_map>\n");
header.write("\n")
header.write("namespace WebPage {\n");
header.write("  using Payload=std::vector<unsigned char>;\n") 
header.write("  using Dir=std::unordered_map<std::string,Payload>;\n") 
header.write("  extern const Dir webpage;\n")
header.write("}\n");
header.write("\n")
header.write("#endif\n")

cpp = open("webpage.cpp", "w")

cpp.write("#include \"webpage.h\"\n")
cpp.write("\n")
cpp.write("// auto generated by running python utils/dir_to_code.py in the root beefocus\n")
cpp.write("// source directory\n")
cpp.write("\n")
cpp.write("using namespace WebPage;\n")
cpp.write("\n")
cpp.write("const Dir WebPage::webpage{\n")

def handle_file( webname, fname ):
  print( fname )
  cpp.write("\t{ \"" + webname + "\", Payload{\n")
  bytes_on_line = 0;
  cpp.write("\t\t")
  with open(fname, mode='rb') as file:
    byte = file.read(1)
    while byte != "":
      byteint = int(byte.encode('hex'), 16)
      byte = file.read(1)
      cpp.write('{:>3}'.format(byteint))
      if byte != "":
        cpp.write(',')
      bytes_on_line+=1
      if bytes_on_line == 18:
        cpp.write( "\n\t\t" );
        bytes_on_line = 0
    cpp.write( "}\n" )
    cpp.write( "\t},\n" )

for root, dname, flist in os.walk( path ):
  for fname in flist: 
    handle_file( fname, os.path.join( root, fname ))

cpp.write("};\n\n")

